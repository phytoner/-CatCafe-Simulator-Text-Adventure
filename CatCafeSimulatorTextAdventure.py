import random
import time
import sys
from colorama import Fore, init, Style
from enum import Enum
from collections import defaultdict

init(autoreset=True)

class Mood(Enum):
    PLAYFUL = "–∏–≥—Ä–∏–≤—ã–π"
    LAZY = "–ª–µ–Ω–∏–≤—ã–π"
    MOODY = "–∫–∞–ø—Ä–∏–∑–Ω—ã–π"
    HUNGRY = "–≥–æ–ª–æ–¥–Ω—ã–π"
    ARISTOCRAT = "–∞—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∏—á–Ω—ã–π"

class CatCoffee:
    def __init__(self):
        self.menu = {
            1: {"name": "–õ–∞—Ç—Ç–µ —Å –∫–æ—à–∞—á—å–µ–π –º—è—Ç–æ–π", "price": 150, "prep_time": 2, "energy": 1},
            2: {"name": "–ö–∞–ø—É—á–∏–Ω–æ —Å —Ä—ã–±–Ω–æ–π –∫—Ä–æ—à–∫–æ–π", "price": 180, "prep_time": 3, "energy": 2},
            3: {"name": "–ú–æ–ª–æ—á–∫–æ —Å –º–µ–ª–∞–Ω—Ö–æ–ª–∏–µ–π", "price": 90, "prep_time": 1, "energy": 0},
            4: {"name": "–≠—Å–ø—Ä–µ—Å—Å–æ –¥–ª—è —Ö–≤–æ—Å—Ç–∞—Ç—ã—Ö", "price": 120, "prep_time": 2, "energy": 1},
            5: {"name": "VIP-–∫–æ–∫—Ç–µ–π–ª—å '–ó–æ–ª–æ—Ç–∞—è —Ä—ã–±–∫–∞'", "price": 300, "prep_time": 5, "energy": 3}
        }
        
        self.cat_names = {
            "–ë–∞—Ä—Å–∏–∫": {"rarity": "common", "fav_drink": 1},
            "–ú—É—Ä–∑–∏–∫": {"rarity": "common", "fav_drink": 2},
            "–í–∞—Å—å–∫–∞": {"rarity": "common", "fav_drink": 3},
            "–†—ã–∂–∏–∫": {"rarity": "rare", "fav_drink": 4},
            "–°–Ω–µ–∂–æ–∫": {"rarity": "rare", "fav_drink": 1},
            "–ü—É—à–æ–∫": {"rarity": "rare", "fav_drink": 2},
            "–ö–æ–º–ø–æ—Ç": {"rarity": "legendary", "fav_drink": 5},
            "–ì–∞—Ä—Ñ–∏–ª–¥": {"rarity": "legendary", "fav_drink": 5}
        }
        
        self.stats = {
            "served": 0,
            "income": 0,
            "run_aways": 0,
            "vip_clients": 0,
            "broken_cups": 0
        }
        
        self.player = {
            "reputation": 0,
            "tips": 0,
            "mood_boost": False
        }
        
        self.day_counter = 1
        self.payment_fail_chance = 0.25
        self.game_active = True
        
    def show_header(self):
        print(Fore.BLUE + Style.BRIGHT + f"\n=== –î–µ–Ω—å {self.day_counter} –≤ –ö–æ—à–∞—á—å–µ–π –ö–æ—Ñ–µ–π–Ω–µ ===")
        print(Fore.YELLOW + f"üí∞ –ö–∞—Å—Å–∞: {self.stats['income']}‚ÇΩ | üêæ –†–µ–ø—É—Ç–∞—Ü–∏—è: {self.player['reputation']}/100")
        print(Fore.CYAN + f"üëë VIP-–∫–ª–∏–µ–Ω—Ç–æ–≤: {self.stats['vip_clients']} | üèÉ –£–±–µ–∂–∞–ª–∏: {self.stats['run_aways']}")
    
    def show_menu(self):
        print(Fore.YELLOW + "\nüêæ –ú–µ–Ω—é –∫–æ—à–∞—á—å–µ–π –∫–æ—Ñ–µ–π–Ω–∏:")
        for key, item in self.menu.items():
            energy_icons = "‚ö°" * item["energy"]
            print(f"{Fore.GREEN}{key}. {item['name']} - {item['price']}‚ÇΩ {energy_icons}")
    
    def get_cat_with_rarity(self):
        cats_by_rarity = {
            "common": [name for name, data in self.cat_names.items() if data["rarity"] == "common"],
            "rare": [name for name, data in self.cat_names.items() if data["rarity"] == "rare"],
            "legendary": [name for name, data in self.cat_names.items() if data["rarity"] == "legendary"]
        }
        
        # –®–∞–Ω—Å—ã: common 70%, rare 25%, legendary 5%
        rarity = random.choices(
            ["common", "rare", "legendary"],
            weights=[70, 25, 5],
            k=1
        )[0]
        
        return random.choice(cats_by_rarity[rarity])
    
    def draw_cat(self, name):
        cats_art = {
            "common": r"""
 /\_/\  
( o.o ) 
 > ^ <
            """,
            "rare": r"""
  /\_/\  
 ( ^.^ ) 
 /  \  \
            """,
            "legendary": r"""
  /\_/\  
 ( ‚óï·¥ó‚óï ) 
 /[] []\
            """
        }
        
        rarity = self.cat_names[name]["rarity"]
        print(Fore.CYAN + cats_art[rarity])
        print(Fore.MAGENTA + Style.BRIGHT + f"–ö –≤–∞–º –ø—Ä–∏—à–µ–ª {rarity} –∫–æ—Ç {name}!")
    
    def calculate_tip(self, cat_name, drink_id, mood):
        base_tip = random.randint(10, 50)
        
        # –ë–æ–Ω—É—Å—ã
        bonus = 0
        if self.cat_names[cat_name]["fav_drink"] == drink_id:
            bonus += 30
            print(Fore.GREEN + f"{cat_name} –æ–±–æ–∂–∞–µ—Ç —ç—Ç–æ—Ç –Ω–∞–ø–∏—Ç–æ–∫!")
        
        if mood == Mood.ARISTOCRAT.value:
            bonus += 40
        
        if self.player["mood_boost"]:
            bonus += 20
        
        return base_tip + bonus
    
    def take_order(self):
        cat_name = self.get_cat_with_rarity()
        mood = random.choice([m.value for m in Mood])
        
        self.draw_cat(cat_name)
        print(Fore.CYAN + f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}")
        
        self.show_menu()
        try:
            choice = int(input("–í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫ (1-5): "))
            if choice not in self.menu:
                raise ValueError
        except ValueError:
            print(Fore.RED + "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ö–æ—Ç —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω–æ –º–∞—Ö–Ω—É–ª —Ö–≤–æ—Å—Ç–æ–º.")
            self.player["reputation"] = max(0, self.player["reputation"] - 5)
            return
        
        item = self.menu[choice]
        
        # –û—Å–æ–±–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –∞—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∏—á–Ω—ã—Ö –∫–æ—Ç–æ–≤
        if mood == Mood.ARISTOCRAT.value and choice != 5:
            print(Fore.RED + f"{cat_name} –ø—Ä–µ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ —Ñ—ã—Ä–∫–∞–µ—Ç –Ω–∞ —Ç–∞–∫–æ–π –ø—Ä–æ—Å—Ç–æ–π –Ω–∞–ø–∏—Ç–æ–∫!")
            self.player["reputation"] = max(0, self.player["reputation"] - 10)
            return
        
        print(Fore.GREEN + f"\n–ì–æ—Ç–æ–≤–∏–º {item['name']} –¥–ª—è {cat_name}...")
        self.animate_preparation(item['prep_time'])
        
        # –†–µ–∞–∫—Ü–∏—è –∫–æ—Ç–∞
        reactions = [
            f"{cat_name} –º—É—Ä–ª—ã—á–µ—Ç –æ—Ç —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è!",
            f"{cat_name} –Ω–µ–¥–æ–≤–æ–ª—å–Ω–æ —Ñ—ã—Ä–∫–∞–µ—Ç...",
            f"{cat_name} —Ä–∞–∑–ª–∏–ª –Ω–∞–ø–∏—Ç–æ–∫! –ü—Ä–∏–¥–µ—Ç—Å—è —É–±–∏—Ä–∞—Ç—å.",
            f"{cat_name} –∑–∞—Å–Ω—É–ª –ø—Ä—è–º–æ –≤ —á–∞—à–∫–µ. zZz...",
            f"{cat_name} –∏–≥—Ä–∏–≤–æ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —á–∞—à–∫—É –ª–∞–ø–æ–π!"
        ]
        
        reaction = random.choice(reactions)
        if "—Ä–∞–∑–ª–∏–ª" in reaction:
            self.stats["broken_cups"] += 1
        
        print(Fore.MAGENTA + reaction)
        
        # –û–ø–ª–∞—Ç–∞ –∏ —á–∞–µ–≤—ã–µ
        if random.random() < self.payment_fail_chance:
            print(Fore.RED + f"{cat_name} —É–±–µ–∂–∞–ª, –Ω–µ –∑–∞–ø–ª–∞—Ç–∏–≤! üòæ")
            self.stats["run_aways"] += 1
            self.player["reputation"] = max(0, self.player["reputation"] - 5)
        else:
            print(Fore.GREEN + f"+{item['price']}‚ÇΩ –≤ –∫–∞—Å—Å—É!")
            self.stats["income"] += item['price']
            
            # –ß–∞–µ–≤—ã–µ
            tip = self.calculate_tip(cat_name, choice, mood)
            print(Fore.YELLOW + f"üç™ {cat_name} –æ—Å—Ç–∞–≤–∏–ª {tip}‚ÇΩ —á–∞–µ–≤—ã—Ö!")
            self.player["tips"] += tip
            self.stats["income"] += tip
            
            # –†–µ–ø—É—Ç–∞—Ü–∏—è
            rep_gain = random.randint(1, 3)
            if self.cat_names[cat_name]["rarity"] == "legendary":
                rep_gain *= 2
                self.stats["vip_clients"] += 1
            self.player["reputation"] = min(100, self.player["reputation"] + rep_gain)
        
        self.stats["served"] += 1
        
        # –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        self.random_event(cat_name)
    
    def animate_preparation(self, seconds):
        for i in range(seconds):
            print(Fore.YELLOW + "–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ" + "." * (i % 4), end="\r")
            time.sleep(1)
        print(" " * 20, end="\r")
    
    def random_event(self, cat_name):
        if random.random() < 0.15:
            events = [
                (f"{cat_name} –ø—Ä–∏–≤–µ–ª —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞! –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –∫–ª–∏–µ–Ω—Ç–æ–≤.", "positive"),
                ("–í—ã –Ω–∞—à–ª–∏ –º–æ–Ω–µ—Ç–∫—É –ø–æ–¥ —Å—Ç–æ–ª–æ–º! +20‚ÇΩ", "income"),
                ("–ö—Ç–æ-—Ç–æ –æ—Å—Ç–∞–≤–∏–ª –≤–æ—Å—Ç–æ—Ä–∂–µ–Ω–Ω—ã–π –æ—Ç–∑—ã–≤ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö! +10 –∫ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏", "reputation"),
                ("–û –Ω–µ—Ç! –û–¥–∏–Ω –∏–∑ –∫–æ—Ç–æ–≤ –ø–æ—Ü–∞—Ä–∞–ø–∞–ª –º–µ–±–µ–ª—å. -15‚ÇΩ –Ω–∞ —Ä–µ–º–æ–Ω—Ç", "negative"),
                ("–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞ –∫–æ—Ç—ã –±—É–¥—É—Ç –≤ –ª—É—á—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏!", "mood_boost")
            ]
            
            event, effect = random.choice(events)
            print(Fore.BLUE + "\n‚ö° –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: " + event)
            
            if effect == "positive":
                self.player["reputation"] = min(100, self.player["reputation"] + 10)
            elif effect == "income":
                self.stats["income"] += 20
            elif effect == "reputation":
                self.player["reputation"] = min(100, self.player["reputation"] + 10)
            elif effect == "negative":
                self.stats["income"] = max(0, self.stats["income"] - 15)
            elif effect == "mood_boost":
                self.player["mood_boost"] = True
    
    def end_day(self):
        print(Fore.BLUE + "\n=== –ö–æ–Ω–µ—Ü –¥–Ω—è ===")
        print(Fore.YELLOW + f"–í—Å–µ–≥–æ –æ–±—Å–ª—É–∂–µ–Ω–æ –∫–æ—Ç–æ–≤: {self.stats['served']}")
        print(Fore.CYAN + f"–ß–∞–µ–≤—ã–µ: {self.player['tips']}‚ÇΩ")
        
        # –ë–æ–Ω—É—Å –∑–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—é
        if self.player["reputation"] >= 80:
            bonus = 100
            print(Fore.GREEN + f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è! –ë–æ–Ω—É—Å +{bonus}‚ÇΩ")
            self.stats["income"] += bonus
        
        print(Fore.MAGENTA + f"–ò—Ç–æ–≥–æ–≤—ã–π –¥–æ—Ö–æ–¥: {self.stats['income']}‚ÇΩ")
        
        # –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.player["tips"] = 0
        self.day_counter += 1
        self.player["mood_boost"] = False
        
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if self.day_counter % 3 == 0:
            self.payment_fail_chance = max(0.1, self.payment_fail_chance - 0.05)
            print(Fore.GREEN + "\n–í–∞—à–∞ –∫–æ—Ñ–µ–π–Ω—è —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ–ø—É–ª—è—Ä–Ω–µ–µ! –ö–æ—Ç—ã —Ä–µ–∂–µ —É–±–µ–≥–∞—é—Ç –±–µ–∑ –æ–ø–ª–∞—Ç—ã.")
    
    def show_stats(self):
        print(Fore.BLUE + "\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ñ–µ–π–Ω–∏:")
        print(f"–î–Ω–µ–π —Ä–∞–±–æ—Ç—ã: {self.day_counter - 1}")
        print(f"–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {self.stats['served']}")
        print(f"VIP-–∫–ª–∏–µ–Ω—Ç–æ–≤: {self.stats['vip_clients']}")
        print(f"–£–±–µ–∂–∞–ª–∏ –±–µ–∑ –æ–ø–ª–∞—Ç—ã: {self.stats['run_aways']}")
        print(f"–†–∞–∑–±–∏—Ç–æ —á–∞—à–µ–∫: {self.stats['broken_cups']}")
        print(f"–û–±—â–∏–π –¥–æ—Ö–æ–¥: {self.stats['income']}‚ÇΩ")
    
    def start(self):
        print(Fore.BLUE + Style.BRIGHT + "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–æ—à–∞—á—å—é –ö–æ—Ñ–µ–π–Ω—é!")
        print(Fore.MAGENTA + "–í–∞—à–∞ —Ü–µ–ª—å - –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å 2000‚ÇΩ –∏ –ø–æ–ª—É—á–∏—Ç—å 5 –∑–≤–µ–∑–¥ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏!\n")
        
        while self.game_active:
            self.show_header()
            
            print("\n1. –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑")
            print("2. –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–µ–Ω—å")
            print("3. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            print("4. –í—ã–π—Ç–∏")
            
            try:
                choice = int(input("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: "))
            except ValueError:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!")
                continue
            
            if choice == 1:
                self.take_order()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
                if self.stats["income"] >= 2000 and self.player["reputation"] >= 80:
                    print(Fore.GREEN + Style.BRIGHT + "\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏!")
                    print("–í–∞—à–∞ –∫–æ—Ñ–µ–π–Ω—è —Å—Ç–∞–ª–∞ —Å–∞–º–æ–π –ø–æ–ø—É–ª—è—Ä–Ω–æ–π —Å—Ä–µ–¥–∏ –∫–æ—Ç–æ–≤!")
                    self.show_stats()
                    self.game_active = False
            elif choice == 2:
                self.end_day()
            elif choice == 3:
                self.show_stats()
            elif choice == 4:
                print("–ö–æ—Ñ–µ–π–Ω—è –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è. –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á! üò∫")
                self.game_active = False
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

if __name__ == "__main__":
    cafe = CatCoffee()
    cafe.start()